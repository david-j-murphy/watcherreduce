import os
import pyfits
import watcherreduce as wr
from watcherreduce import reduce
import sys, optparse
import datetime


class flatcache:
	def __init__(self):
		self.cache = {}

	def get(self, flatdate, filter):
		return self.cache.get(str(flatdate.date()), {}).get(filter)

	def save(self, flatdate, filter, hdu):
		nightdict = self.cache.get(str(flatdate.date()))
		if not nightdict: self.cache[str(flatdate.date())] = {}
		self.cache[str(flatdate.date())][filter] = hdu


def easyReduceFolder(inputfolder, outputfolder, suffix, verbose):
	files = [os.path.join(inputfolder, filename) for filename in os.listdir(inputfolder) if filename.endswith('.fits')]
	files.sort()
	downloaded = flatcache()
	numfiles = len(files)
	for fileindex, fitspath in enumerate(files):

		skip = False
		alreadydown = False

		imagehdu = pyfits.open(fitspath)[0]
		flatNight, filter = wr.findFlatDetailsForHDU(imagehdu)
		# Do we already have a master flat that matches this night? 
		masterflathdu = downloaded.get(flatNight, filter)
		if masterflathdu:
			alreadydown = True
		else:
			# If we don't, what is the correct flat for this night?
			validNight = wr.searchMasterFlat(flatNight, filter, limit = 100, allowNewer = True)
			if not validNight:
				# If we can't find a valid flat, just skip reducing this file.
				print '%d/%d: %s Unable to find valid flat, skipping.' % (fileindex+1, numfiles, os.path.split(fitspath)[1])
				continue
			# Did we already download it?
			masterflathdu = downloaded.get(validNight, filter)
			if masterflathdu:
				alreadydown = True
			else:
				# If not, let's download it.
				masterflathdu = wr.downloadMasterFlat(validNight, filter)
				# And let's store it.
				downloaded.save(validNight, filter, masterflathdu)
			# Update the cache to point to it in future.
			downloaded.save(flatNight, filter, masterflathdu)

		if verbose:
			print '%*d/%d: %s %c%s' % (len('%d' % numfiles), fileindex+1, numfiles, os.path.split(fitspath)[1], '*' if alreadydown else ' ', validNight.date())


		reducedhdu = reduce.reduceImage(imagehdu, masterflathdu)
		filename, extension = os.path.splitext(os.path.split(fitspath)[1])
		outputname = filename + suffix + extension
		outputpath = os.path.join(outputfolder, outputname)
		reducedhdu.writeto(outputpath)


def main(argv):
	parser = optparse.OptionParser(usage = '%prog <input folder> [options]')
	parser.add_option('-o', '--output', dest='output', help = 'Specify an output folder')
	parser.add_option('-s', '--suffix', dest='suffix', help = 'Specify a suffix to be appended to processed filenames before the extension', default = '_red')
	parser.add_option('-v', '--verbose', action='store_true', dest='verbose', help = 'Verbose output', default = False)


	(opts, args) = parser.parse_args()

	if len(args) < 1:
		print "Need to specify input folder. Use '.' for current folder."
		return
	else:
		inputfolder = args[0]

	outputfolder = opts.output
	if outputfolder:
		if not os.path.exists(outputfolder):
			print 'Output folder must already exist.'
			return
	else:
		outputfolder = ''

	easyReduceFolder(inputfolder, outputfolder, opts.suffix, opts.verbose)


if __name__ == '__main__':
	main(sys.argv)
